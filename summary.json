[{
  "package": "com.example.demo",
  "className": "DemoApplication",
  "model": [{
    "name": "args",
    "type": "String[]"
  }],
  "staticField": [{
    "name": "run",
    "detail": [{
      "name": "DemoApplication.class",
      "value": "args"
    }]
  }],
  "methods": [{
    "name": "main",
    "input": [{
      "name": "args",
      "type": "String[]"
    }],
    "invoked": [{
      "name": "SpringApplication",
      "method": "run",
      "input": "DemoApplication.class, args"
    }],
    "explanation": "This method is the main method of the DemoApplication class. It takes in a String array as an argument and invokes the run method of the SpringApplication class with the DemoApplication class and the args as arguments."
  }]
},
  {
    "package": "com.example.demo.entity",
    "className": "Identifier",
    "model": [{
      "name": "concept",
      "type": "Concept"
    },
      {
        "name": "attributeValue",
        "type": "Map<Attribute, String>"
      }
    ],
    "staticField": [{
      "name": "@Getter",
      "detail": [{
        "name": "name",
        "value": "@Getter"
      }]
    },
      {
        "name": "@Setter",
        "detail": [{
          "name": "name",
          "value": "@Setter"
        }]
      }
    ],
    "methods": [{
      "name": "Identifier",
      "input": [],
      "invoked": [],
      "explanation": "This is the constructor of the Identifier class. It does not take any input parameters and does not invoke any other methods."
    }]
  },
  {
    "package": "com.example.demo.entity",
    "className": "Response",
    "model": [{
      "name": "productId",
      "type": "Integer"
    }],
    "staticField": [{
      "name": "AllArgsConstructor",
      "detail": [{
        "name": "Getter",
        "value": ""
      },
        {
          "name": "Setter",
          "value": ""
        }
      ]
    }],
    "methods": [{
      "name": "Response",
      "input": [{
        "name": "productId",
        "type": "Integer"
      }],
      "invoked": [],
      "explanation": "This is the constructor of the Response class. It takes in an Integer parameter called productId and sets it as the value of the productId field."
    }]
  },
  {
    "package": "com.example.demo.entity",
    "className": "EnumType",
    "model": [{
      "name": "tableName",
      "type": "String"
    },
      {
        "name": "fieldName",
        "type": "String"
      }
    ],
    "staticField": [{
      "name": "PRODUCT",
      "detail": [{
        "name": "tableName",
        "value": "product.dc"
      },
        {
          "name": "fieldName",
          "value": "pin"
        }
      ]
    },
      {
        "name": "VENDOR",
        "detail": [{
          "name": "tableName",
          "value": "vendor.dc"
        },
          {
            "name": "fieldName",
            "value": "vin"
          }
        ]
      }
    ],
    "methods": [{
      "name": "EnumType",
      "input": [{
        "name": "tableName",
        "type": "String"
      },
        {
          "name": "fieldName",
          "type": "String"
        }
      ],
      "invoked": [],
      "explanation": "This is the constructor of the EnumType class. It takes two parameters, tableName and fieldName, and assigns them to the corresponding fields of the class."
    },
      {
        "name": "getTableName",
        "input": [],
        "invoked": [],
        "explanation": "This method returns the tableName field of the EnumType class."
      },
      {
        "name": "getFieldName",
        "input": [],
        "invoked": [],
        "explanation": "This method returns the fieldName field of the EnumType class."
      }
    ]
  },
  {
    "package": "com.example.demo.entity",
    "className": "Attribute",
    "model": [{
      "name": "dcaId",
      "type": "Integer"
    },
      {
        "name": "fieldName",
        "type": "String"
      },
      {
        "name": "name",
        "type": "String"
      }
    ],
    "staticField": [{
      "name": "AllArgsConstructor",
      "detail": [{
        "name": "dcaId",
        "value": "null"
      },
        {
          "name": "fieldName",
          "value": "null"
        },
        {
          "name": "name",
          "value": "null"
        }
      ]
    },
      {
        "name": "Getter",
        "detail": []
      },
      {
        "name": "Setter",
        "detail": []
      }
    ],
    "methods": [{
      "name": "Attribute",
      "input": [{
        "type": "Integer",
        "name": "dcaId"
      },
        {
          "type": "String",
          "name": "fieldName"
        },
        {
          "type": "String",
          "name": "name"
        }
      ],
      "invoked": [],
      "explanation": "This method is used to create an Attribute object with three parameters: dcaId, fieldName and name."
    }]
  },
  {
    "package": "com.example.demo.entity",
    "className": "Concept",
    "model": [{
      "name": "enumType",
      "type": "EnumType"
    },
      {
        "name": "name",
        "type": "String"
      },
      {
        "name": "columns",
        "type": "List<Attribute>"
      }
    ],
    "staticField": [{
      "name": "Getter",
      "detail": [{
        "name": "value",
        "value": "true"
      }]
    },
      {
        "name": "Setter",
        "detail": [{
          "name": "value",
          "value": "true"
        }]
      }
    ],
    "methods": [{
      "name": "Concept",
      "input": [],
      "invoked": [],
      "explanation": "This is the constructor of the Concept class, it will be invoked when creating a new instance of the Concept class."
    }]
  },
  {
    "package": "com.example.demo.dao",
    "className": "SQLProcess",
    "model": [{
      "name": "DC",
      "type": "com.example.demo.model.DC"
    },
      {
        "name": "DCA",
        "type": "com.example.demo.model.DCA"
      },
      {
        "name": "Mapping",
        "type": "com.example.demo.model.Mapping"
      }
    ],
    "staticField": [],
    "methods": [{
      "name": "insert",
      "input": [{
        "name": "sql",
        "type": "String"
      }],
      "invoked": [],
      "explanation": "This method is used to insert data into the database. The input parameter is the sql statement."
    },
      {
        "name": "select",
        "input": [{
          "name": "sql",
          "type": "String"
        }],
        "invoked": [],
        "explanation": "This method is used to select data from the database. The input parameter is the sql statement."
      },
      {
        "name": "selectDCByDCTable",
        "input": [{
          "name": "table",
          "type": "String"
        }],
        "invoked": [],
        "explanation": "This method is used to select DC data from the database by table name. The input parameter is the table name."
      },
      {
        "name": "selectDCAByDCId",
        "input": [{
          "name": "dcId",
          "type": "Integer"
        }],
        "invoked": [],
        "explanation": "This method is used to select DCA data from the database by DC id. The input parameter is the DC id."
      },
      {
        "name": "selectMapping",
        "input": [],
        "invoked": [],
        "explanation": "This method is used to select mapping data from the database."
      },
      {
        "name": "findMaxPin",
        "input": [],
        "invoked": [],
        "explanation": "This method is used to find the maximum pin from the database."
      }
    ]
  },
  {
    "package": "com.example.demo.controller",
    "className": "ProcessController",
    "model": [{
      "name": "process",
      "type": "Process"
    }],
    "staticField": [],
    "methods": [{
      "name": "processVin",
      "input": [],
      "invoked": [{
        "name": "process",
        "method": "link",
        "input": []
      }],
      "explanation": "This method is used to process the Vin. It calls the link() method of the Process service to get the response."
    }]
  },
  {
    "package": "com.example.demo.model",
    "className": "DCA",
    "model": [{
      "name": "dcaId",
      "type": "Integer"
    },
      {
        "name": "dcId",
        "type": "Integer"
      },
      {
        "name": "field",
        "type": "String"
      },
      {
        "name": "name",
        "type": "String"
      }
    ],
    "staticField": [],
    "methods": [{
      "name": "getDcaId",
      "input": [],
      "invoked": [],
      "explanation": "This method returns the dcaId of the DCA object."
    },
      {
        "name": "setDcaId",
        "input": [{
          "name": "dcaId",
          "type": "Integer"
        }],
        "invoked": [],
        "explanation": "This method sets the dcaId of the DCA object."
      },
      {
        "name": "getDcId",
        "input": [],
        "invoked": [],
        "explanation": "This method returns the dcId of the DCA object."
      },
      {
        "name": "setDcId",
        "input": [{
          "name": "dcId",
          "type": "Integer"
        }],
        "invoked": [],
        "explanation": "This method sets the dcId of the DCA object."
      },
      {
        "name": "getField",
        "input": [],
        "invoked": [],
        "explanation": "This method returns the field of the DCA object."
      },
      {
        "name": "setField",
        "input": [{
          "name": "field",
          "type": "String"
        }],
        "invoked": [],
        "explanation": "This method sets the field of the DCA object."
      },
      {
        "name": "getName",
        "input": [],
        "invoked": [],
        "explanation": "This method returns the name of the DCA object."
      },
      {
        "name": "setName",
        "input": [{
          "name": "name",
          "type": "String"
        }],
        "invoked": [],
        "explanation": "This method sets the name of the DCA object."
      }
    ]
  },
  {
    "package": "com.example.demo.model",
    "className": "Mapping",
    "model": [{
      "name": "vinDCAId",
      "type": "Integer"
    },
      {
        "name": "pinDCAId",
        "type": "Integer"
      }
    ],
    "staticField": [],
    "methods": [{
      "name": "Getter",
      "input": [],
      "invoked": [],
      "explanation": "This method is used to get the value of the global parameters"
    },
      {
        "name": "Setter",
        "input": [],
        "invoked": [],
        "explanation": "This method is used to set the value of the global parameters"
      }
    ]
  },
  {
    "package": "com.example.demo.model",
    "className": "DC",
    "model": [{
      "name": "dcId",
      "type": "Integer"
    },
      {
        "name": "table",
        "type": "String"
      },
      {
        "name": "name",
        "type": "String"
      }
    ],
    "staticField": [{
      "name": "dcId",
      "detail": [{
        "name": "dcId",
        "value": null
      }]
    },
      {
        "name": "table",
        "detail": [{
          "name": "table",
          "value": null
        }]
      },
      {
        "name": "name",
        "detail": [{
          "name": "name",
          "value": null
        }]
      }
    ],
    "methods": [{
      "name": "getDcId",
      "input": [],
      "invoked": [],
      "explanation": "This method is used to get the dcId value."
    },
      {
        "name": "setDcId",
        "input": [{
          "name": "dcId",
          "type": "Integer"
        }],
        "invoked": [],
        "explanation": "This method is used to set the dcId value."
      },
      {
        "name": "getTable",
        "input": [],
        "invoked": [],
        "explanation": "This method is used to get the table value."
      },
      {
        "name": "setTable",
        "input": [{
          "name": "table",
          "type": "String"
        }],
        "invoked": [],
        "explanation": "This method is used to set the table value."
      },
      {
        "name": "getName",
        "input": [],
        "invoked": [],
        "explanation": "This method is used to get the name value."
      },
      {
        "name": "setName",
        "input": [{
          "name": "name",
          "type": "String"
        }],
        "invoked": [],
        "explanation": "This method is used to set the name value."
      }
    ]
  },
  {
    "package": "com.example.demo.service",
    "className": "VendorWrite",
    "model": [{
      "name": "sqlProcess",
      "type": "SQLProcess"
    }],
    "staticField": [],
    "methods": [{
      "name": "getSt",
      "input": [{
        "name": "concept",
        "type": "Concept"
      },
        {
          "name": "vin",
          "type": "Integer"
        }
      ],
      "invoked": [{
        "name": "sqlProcess",
        "method": "select",
        "input": "sql"
      }],
      "explanation": [
        "This method is used to get the Identifier object based on the Concept and vin.",
        "First, create a Identifier object and a Map object to store the Attribute and String.",
        "Second, create a sql string to select the data from the table based on the Concept and vin.",
        "Third, get the result from the sqlProcess.select method.",
        "Fourth, loop the concept.getColumns to get the Attribute and String from the result and put them into the Map object.",
        "Finally, set the Map object to the Identifier object and return the Identifier object."
      ]
    }]
  },
  {
    "package": "com.example.demo.service",
    "className": "Process",
    "model": [{
      "name": "vin",
      "type": "Integer"
    }],
    "staticField": [{
      "name": "sqlProcess",
      "detail": [{
        "name": "SQLProcess",
        "value": "sqlProcess"
      }]
    },
      {
        "name": "initService",
        "detail": [{
          "name": "InitService",
          "value": "initService"
        }]
      },
      {
        "name": "vendorWrite",
        "detail": [{
          "name": "VendorWrite",
          "value": "vendorWrite"
        }]
      },
      {
        "name": "productWrite",
        "detail": [{
          "name": "ProductWrite",
          "value": "productWrite"
        }]
      }
    ],
    "methods": [{
      "name": "link",
      "input": [],
      "invoked": [{
        "name": "sqlProcess",
        "method": "findMaxPin",
        "input": []
      },
        {
          "name": "initService",
          "method": "getConceptSchema",
          "input": [{
            "name": "EnumType",
            "value": "VENDOR"
          }]
        },
        {
          "name": "initService",
          "method": "getConceptSchema",
          "input": [{
            "name": "EnumType",
            "value": "PRODUCT"
          }]
        },
        {
          "name": "initService",
          "method": "getMappings",
          "input": []
        },
        {
          "name": "vendorWrite",
          "method": "getSt",
          "input": [{
            "name": "vinConcept",
            "value": "vinConcept"
          },
            {
              "name": "vin",
              "value": "vin"
            }
          ]
        },
        {
          "name": "productWrite",
          "method": "getInsertStr",
          "input": []
        },
        {
          "name": "sqlProcess",
          "method": "insert",
          "input": [{
            "name": "insertSt",
            "value": "insertSt"
          }]
        }
      ],
      "explanation": "This method is used to link the vendor and product information. First, it finds the max pin number and add 1 to it. Then, it gets the concept schema of vendor and product from initService. After that, it gets the mapping information from initService. Then, it gets the vendor information from vendorWrite. After that, it creates a new Identifier for product and inserts the product information into the database. Finally, it returns the new pin number."
    }]
  },
  {
    "package": "com.example.demo.service",
    "className": "InitService",
    "model": [{
      "name": "conceptSchema",
      "type": "Map<EnumType, Concept>"
    },
      {
        "name": "mappings",
        "type": "List<Mapping>"
      },
      {
        "name": "sqlProcess",
        "type": "SQLProcess"
      },
      {
        "name": "productWrite",
        "type": "ProductWrite"
      }
    ],
    "staticField": [{
      "name": "conceptSchema",
      "detail": [{
        "name": "EnumType",
        "value": "Concept"
      }]
    }],
    "methods": [{
      "name": "init",
      "input": [],
      "invoked": [{
        "name": "sqlProcess",
        "method": "selectMapping",
        "input": []
      },
        {
          "name": "this",
          "method": "loadSchema",
          "input": [{
            "name": "EnumType.VENDOR",
            "type": "EnumType"
          }]
        },
        {
          "name": "this",
          "method": "loadSchema",
          "input": [{
            "name": "EnumType.PRODUCT",
            "type": "EnumType"
          }]
        }
      ],
      "explanation": "This method is used to initialize the mappings and conceptSchema. It calls the selectMapping method of sqlProcess to get the mappings and calls the loadSchema method twice to get the conceptSchema for EnumType.VENDOR and EnumType.PRODUCT."
    },
      {
        "name": "loadSchema",
        "input": [{
          "name": "enumType",
          "type": "EnumType"
        }],
        "invoked": [{
          "name": "sqlProcess",
          "method": "selectDCByDCTable",
          "input": [{
            "name": "enumType.getTableName()",
            "type": "String"
          }]
        },
          {
            "name": "sqlProcess",
            "method": "selectDCAByDCId",
            "input": [{
              "name": "dc.getDcId()",
              "type": "Integer"
            }]
          },
          {
            "name": "productWrite",
            "method": "insertSt",
            "input": [{
              "name": "concept",
              "type": "Concept"
            }]
          }
        ],
        "explanation": "This method is used to load the schema for the given enumType. It calls the selectDCByDCTable method of sqlProcess to get the DC and calls the selectDCAByDCId method to get the DCA list. Then it creates a Concept object and sets the name and columns. Finally, it puts the Concept object into the conceptSchema map and calls the insertSt method of productWrite if the enumType is EnumType.PRODUCT."
      }
    ]
  },
  {
    "package": "com.example.demo.service",
    "className": "ProductWrite",
    "model": [{
      "name": "insertStr",
      "type": "String"
    }],
    "staticField": [{
      "name": "insertStr",
      "detail": [{
        "name": "insertStr",
        "value": ""
      }]
    }],
    "methods": [{
      "name": "insertSt",
      "input": [{
        "name": "concept",
        "type": "Concept"
      }],
      "invoked": [{
        "name": "concept",
        "method": "getEnumType",
        "input": "None"
      },
        {
          "name": "concept",
          "method": "getColumns",
          "input": "None"
        }
      ],
      "explanation": "This method is used to insert data into the database. It takes in a Concept object as an input parameter. It then creates a StringBuilder object and appends the table name and field name from the Concept object's EnumType. It then iterates through the Concept object's columns and appends the field names to the StringBuilder. It then appends the values to the StringBuilder and sets the insertStr to the StringBuilder's string. "
    }]
  }
]
